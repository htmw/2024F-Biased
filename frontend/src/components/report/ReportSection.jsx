import { useState, useEffect } from "react";
import { Download, Eye, FileText } from "lucide-react";
import ReportTemplateModal from "./ReportTemplateModal";

const ReportSection = ({ prediction }) => {
  const [reportData, setReportData] = useState(null);
  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);

  useEffect(() => {
    if (prediction) {
      setReportData({
        reportId: "AI-" + Math.random().toString(36).substr(2, 9).toUpperCase(),
        patientInfo: {
          name: "SAMPLE, PATIENT",
          caseNumber: "D-" + new Date().getTime(),
          demographics: "45 years Female",
          patientId:
            "PT" + Math.random().toString(36).substr(2, 9).toUpperCase(),
        },
        analysisDate: new Date().toLocaleString(),
        generatedDate: new Date().toLocaleString(),
        analysis: {
          mainFindings: prediction.condition,
          confidence: prediction.confidence,
        },
        examination: {
          location: "Affected area",
          characteristics: prediction.condition,
          additionalFindings: "No additional findings",
        },
        summary: {
          condition: prediction.condition,
          severity: prediction.severity,
          description: `The analysis indicates ${prediction.severity.toLowerCase()} ${prediction.condition.toLowerCase()}.`,
        },
        recommendations: prediction.recommendations || [
          "Consult with a healthcare provider",
          "Follow recommended skin care routine",
          "Monitor for changes",
        ],
      });
    }
  }, [prediction]);

  const generateReportHTML = (data) => {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .report-header { border-bottom: 2px solid #1e40af; padding-bottom: 20px; margin-bottom: 20px; }
          .report-title { color: #1e40af; font-size: 24px; font-weight: 300; }
          .patient-info { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin: 20px 0; }
          .section { margin: 20px 0; }
          .section-title { font-size: 18px; font-weight: 600; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
          .section-content { padding-left: 20px; margin-top: 10px; }
          .recommendations { list-style-type: disc; padding-left: 20px; }
          .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        <div class="report-header">
          <div class="report-title">SKINLENS AI ANALYSIS REPORT</div>
          <div>Report #: ${data.reportId}</div>
        </div>

        <div class="patient-info">
          <div><strong>Patient Name:</strong> ${data.patientInfo.name}</div>
          <div><strong>Case #:</strong> ${data.patientInfo.caseNumber}</div>
          <div><strong>DOB/Age/Sex:</strong> ${data.patientInfo.demographics}</div>
          <div><strong>Analyzed:</strong> ${data.analysisDate}</div>
          <div><strong>Patient ID:</strong> ${data.patientInfo.patientId}</div>
          <div><strong>Report Generated:</strong> ${data.generatedDate}</div>
        </div>

        <div class="section">
          <div class="section-title">AI Analysis</div>
          <div class="section-content">
            <p>${data.analysis.mainFindings}</p>
            <p>Confidence Level: ${data.analysis.confidence}</p>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Detailed Examination</div>
          <div class="section-content">
            <p><strong>Location:</strong> ${data.examination.location}</p>
            <p><strong>Characteristics:</strong> ${data.examination.characteristics}</p>
            <p><strong>Additional Findings:</strong> ${data.examination.additionalFindings}</p>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Analysis Summary</div>
          <div class="section-content">
            <p><strong>Primary Condition:</strong> ${data.summary.condition}</p>
            <p><strong>Severity:</strong> ${data.summary.severity}</p>
            <p>${data.summary.description}</p>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Recommendations</div>
          <div class="section-content">
            <ul class="recommendations">
              ${data.recommendations.map((rec) => `<li>${rec}</li>`).join("")}
            </ul>
          </div>
        </div>

        <div class="footer">
          <p>This report was generated by SkinLens AI Analysis System</p>
          <p>DISCLAIMER: This AI-generated report is for informational purposes only and should not be considered a medical diagnosis. Please consult with a healthcare professional for proper medical advice.</p>
          <p>Report ID: ${data.reportId}</p>
          <p>Generated on: ${data.generatedDate}</p>
        </div>
      </body>
      </html>
    `;
  };

  const handleViewReport = () => {
    if (!prediction) {
      alert("Please analyze an image first to view the report");
      return;
    }
    const reportWindow = window.open("", "_blank");
    reportWindow.document.write(generateReportHTML(reportData));
    reportWindow.document.close();
  };

  const handleDownloadReport = () => {
    if (!prediction) {
      alert("Please analyze an image first to download the report");
      return;
    }
    const reportHTML = generateReportHTML(reportData);
    const blob = new Blob([reportHTML], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `skin-report-${reportData.reportId}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-xl font-light text-gray-900">Report Details</h3>
        <button
          onClick={() => setIsTemplateModalOpen(true)}
          className="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
          title="View Report Template Structure"
        >
          <FileText className="h-4 w-4 mr-1" />
          <span>View Template</span>
        </button>
      </div>

      <div className="space-y-2 text-gray-600">
        {reportData ? (
          <>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500">Patient ID</p>
                <p className="font-medium">
                  {reportData.patientInfo.patientId}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Date</p>
                <p className="font-medium">{reportData.generatedDate}</p>
              </div>
            </div>
            <div className="mt-4">
              <p className="text-sm text-gray-500">Condition</p>
              <p className="font-medium">{reportData.summary.condition}</p>
              <p className="text-sm text-gray-400">
                Confidence: {reportData.analysis.confidence}
              </p>
            </div>
            <div className="mt-4">
              <p className="text-sm text-gray-500">Recommendations</p>
              <ul className="mt-2 list-disc list-inside space-y-1">
                {reportData.recommendations.map((rec, index) => (
                  <li key={index} className="text-sm">
                    {rec}
                  </li>
                ))}
              </ul>
            </div>
          </>
        ) : (
          <div className="text-center text-gray-500 py-4">
            <p>Upload and analyze an image to generate your report</p>
          </div>
        )}
      </div>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-3">
        <button
          onClick={handleViewReport}
          className={`flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-white ${
            prediction
              ? "bg-gray-800 hover:bg-gray-700"
              : "bg-gray-400 cursor-not-allowed"
          } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500`}
          disabled={!prediction}
        >
          <Eye className="w-5 h-5 mr-2" />
          View Report
        </button>

        <button
          onClick={handleDownloadReport}
          className={`flex items-center justify-center px-4 py-2 border rounded-md shadow-sm ${
            prediction
              ? "border-gray-300 text-gray-700 bg-white hover:bg-gray-50"
              : "border-gray-200 text-gray-400 bg-gray-50 cursor-not-allowed"
          } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500`}
          disabled={!prediction}
        >
          <Download className="w-5 h-5 mr-2" />
          Download Report
        </button>
      </div>

      {/* Template Modal */}
      <ReportTemplateModal
        isOpen={isTemplateModalOpen}
        onClose={() => setIsTemplateModalOpen(false)}
        reportData={reportData}
      />
    </div>
  );
};

export default ReportSection;
